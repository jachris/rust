- // MIR for `main` before DataflowConstProp
+ // MIR for `main` after DataflowConstProp
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/promoted.rs:+0:11: +0:11
      let _1: i32;                         // in scope 0 at $DIR/promoted.rs:+2:9: +2:10
      let mut _2: &i32;                    // in scope 0 at $DIR/promoted.rs:+2:14: +2:17
      let _3: i32;                         // in scope 0 at $DIR/promoted.rs:+2:15: +2:17
      let mut _4: &i32;                    // in scope 0 at $DIR/promoted.rs:+2:14: +2:17
      scope 1 {
          debug a => _1;                   // in scope 1 at $DIR/promoted.rs:+2:9: +2:10
      }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/promoted.rs:+2:9: +2:10
          StorageLive(_2);                 // scope 0 at $DIR/promoted.rs:+2:14: +2:17
          _4 = const main::promoted[0];    // scope 0 at $DIR/promoted.rs:+2:14: +2:17
                                           // mir::Constant
                                           // + span: $DIR/promoted.rs:6:14: 6:17
                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
          _2 = &(*_4);                     // scope 0 at $DIR/promoted.rs:+2:14: +2:17
          _1 = (*_2);                      // scope 0 at $DIR/promoted.rs:+2:13: +2:17
          StorageDead(_2);                 // scope 0 at $DIR/promoted.rs:+2:17: +2:18
          _0 = const ();                   // scope 0 at $DIR/promoted.rs:+0:11: +3:2
          StorageDead(_1);                 // scope 0 at $DIR/promoted.rs:+3:1: +3:2
          return;                          // scope 0 at $DIR/promoted.rs:+3:2: +3:2
      }
  }
  
