- // MIR for `main` before DataflowConstProp
+ // MIR for `main` after DataflowConstProp
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/ref.rs:+0:11: +0:11
      let _1: i32;                         // in scope 0 at $DIR/ref.rs:+1:9: +1:10
      let mut _4: bool;                    // in scope 0 at $DIR/ref.rs:+3:16: +3:43
      let mut _5: u32;                     // in scope 0 at $DIR/ref.rs:+3:16: +3:38
      let mut _6: u32;                     // in scope 0 at $DIR/ref.rs:+3:16: +3:34
      let mut _7: bool;                    // in scope 0 at $DIR/ref.rs:+3:16: +3:38
      let _8: &i32;                        // in scope 0 at $DIR/ref.rs:+3:58: +3:60
      let mut _10: i32;                    // in scope 0 at $DIR/ref.rs:+4:13: +4:15
      scope 1 {
          debug a => _1;                   // in scope 1 at $DIR/ref.rs:+1:9: +1:10
          let _2: i32;                     // in scope 1 at $DIR/ref.rs:+2:9: +2:10
          scope 2 {
              debug b => _2;               // in scope 2 at $DIR/ref.rs:+2:9: +2:10
              let _3: &i32;                // in scope 2 at $DIR/ref.rs:+3:9: +3:10
              scope 3 {
                  debug c => _3;           // in scope 3 at $DIR/ref.rs:+3:9: +3:10
                  let _9: i32;             // in scope 3 at $DIR/ref.rs:+4:9: +4:10
                  scope 4 {
                      debug d => _9;       // in scope 4 at $DIR/ref.rs:+4:9: +4:10
                  }
              }
          }
      }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/ref.rs:+1:9: +1:10
          _1 = const 0_i32;                // scope 0 at $DIR/ref.rs:+1:13: +1:14
          StorageLive(_2);                 // scope 1 at $DIR/ref.rs:+2:9: +2:10
          _2 = const 0_i32;                // scope 1 at $DIR/ref.rs:+2:13: +2:14
          StorageLive(_3);                 // scope 2 at $DIR/ref.rs:+3:9: +3:10
          StorageLive(_4);                 // scope 2 at $DIR/ref.rs:+3:16: +3:43
          StorageLive(_5);                 // scope 2 at $DIR/ref.rs:+3:16: +3:38
          StorageLive(_6);                 // scope 2 at $DIR/ref.rs:+3:16: +3:34
          _6 = id() -> bb1;                // scope 2 at $DIR/ref.rs:+3:16: +3:34
                                           // mir::Constant
                                           // + span: $DIR/ref.rs:7:16: 7:32
                                           // + literal: Const { ty: fn() -> u32 {id}, val: Value(<ZST>) }
      }
  
      bb1: {
-         _7 = Eq(const 2_u32, const 0_u32); // scope 2 at $DIR/ref.rs:+3:16: +3:38
-         assert(!move _7, "attempt to calculate the remainder of `{}` with a divisor of zero", _6) -> bb2; // scope 2 at $DIR/ref.rs:+3:16: +3:38
+         _7 = const false;                // scope 2 at $DIR/ref.rs:+3:16: +3:38
+         assert(!const false, "attempt to calculate the remainder of `{}` with a divisor of zero", _6) -> bb2; // scope 2 at $DIR/ref.rs:+3:16: +3:38
      }
  
      bb2: {
          _5 = Rem(move _6, const 2_u32);  // scope 2 at $DIR/ref.rs:+3:16: +3:38
          StorageDead(_6);                 // scope 2 at $DIR/ref.rs:+3:37: +3:38
          _4 = Eq(move _5, const 0_u32);   // scope 2 at $DIR/ref.rs:+3:16: +3:43
          StorageDead(_5);                 // scope 2 at $DIR/ref.rs:+3:42: +3:43
          switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/ref.rs:+3:16: +3:43
      }
  
      bb3: {
          _3 = &_1;                        // scope 2 at $DIR/ref.rs:+3:46: +3:48
          goto -> bb5;                     // scope 2 at $DIR/ref.rs:+3:13: +3:62
      }
  
      bb4: {
          StorageLive(_8);                 // scope 2 at $DIR/ref.rs:+3:58: +3:60
          _8 = &_2;                        // scope 2 at $DIR/ref.rs:+3:58: +3:60
          _3 = &(*_8);                     // scope 2 at $DIR/ref.rs:+3:58: +3:60
          StorageDead(_8);                 // scope 2 at $DIR/ref.rs:+3:61: +3:62
          goto -> bb5;                     // scope 2 at $DIR/ref.rs:+3:13: +3:62
      }
  
      bb5: {
          StorageDead(_4);                 // scope 2 at $DIR/ref.rs:+3:61: +3:62
          StorageLive(_9);                 // scope 3 at $DIR/ref.rs:+4:9: +4:10
          StorageLive(_10);                // scope 3 at $DIR/ref.rs:+4:13: +4:15
-         _10 = (*_3);                     // scope 3 at $DIR/ref.rs:+4:13: +4:15
-         _9 = Add(move _10, const 1_i32); // scope 3 at $DIR/ref.rs:+4:13: +4:19
+         _10 = const 0_i32;               // scope 3 at $DIR/ref.rs:+4:13: +4:15
+         _9 = const 1_i32;                // scope 3 at $DIR/ref.rs:+4:13: +4:19
          StorageDead(_10);                // scope 3 at $DIR/ref.rs:+4:18: +4:19
          _0 = const ();                   // scope 0 at $DIR/ref.rs:+0:11: +5:2
          StorageDead(_9);                 // scope 3 at $DIR/ref.rs:+5:1: +5:2
          StorageDead(_3);                 // scope 2 at $DIR/ref.rs:+5:1: +5:2
          StorageDead(_2);                 // scope 1 at $DIR/ref.rs:+5:1: +5:2
          StorageDead(_1);                 // scope 0 at $DIR/ref.rs:+5:1: +5:2
          return;                          // scope 0 at $DIR/ref.rs:+5:2: +5:2
      }
  }
  
